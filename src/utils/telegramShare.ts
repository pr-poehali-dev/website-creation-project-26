const convertToMp4 = async (blob: Blob): Promise<Blob> => {
  return new Promise((resolve, reject) => {
    const video = document.createElement('video');
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    if (!ctx) {
      reject(new Error('Canvas context not available'));
      return;
    }
    
    video.onloadedmetadata = () => {
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      
      try {
        const stream = canvas.captureStream(30);
        const mediaRecorder = new MediaRecorder(stream, {
          mimeType: 'video/webm;codecs=vp9'
        });
        
        const chunks: BlobPart[] = [];
        
        mediaRecorder.ondataavailable = (event) => {
          if (event.data.size > 0) {
            chunks.push(event.data);
          }
        };
        
        mediaRecorder.onstop = () => {
          const mp4Blob = new Blob(chunks, { type: 'video/mp4' });
          resolve(mp4Blob);
        };
        
        mediaRecorder.onerror = () => {
          reject(new Error('Recording failed'));
        };
        
        const drawFrame = () => {
          if (!video.paused && !video.ended) {
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
            requestAnimationFrame(drawFrame);
          } else {
            mediaRecorder.stop();
          }
        };
        
        video.onplay = () => {
          mediaRecorder.start();
          drawFrame();
        };
        
        video.play();
        
      } catch (error) {
        reject(error);
      }
    };
    
    video.onerror = () => {
      reject(new Error('Video loading failed'));
    };
    
    video.src = URL.createObjectURL(blob);
    video.load();
  });
};

export const sendToTelegram = async (recordedVideo: string) => {
  if (!recordedVideo) return;
  
  try {
    const response = await fetch(recordedVideo);
    const originalBlob = await response.blob();
    
    let finalBlob: Blob;
    let extension = 'mp4';
    
    // Try to convert to MP4
    try {
      finalBlob = await convertToMp4(originalBlob);
      console.log('Video converted to MP4 format');
    } catch (conversionError) {
      console.warn('MP4 conversion failed, using original format:', conversionError);
      finalBlob = originalBlob;
      const mimeType = originalBlob.type || 'video/webm';
      extension = mimeType.includes('mp4') ? 'mp4' : 'webm';
    }
    
    const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    const isAndroid = /Android/i.test(navigator.userAgent);
    
    const url = URL.createObjectURL(finalBlob);
    const downloadLink = document.createElement('a');
    downloadLink.href = url;
    downloadLink.download = `telegram_video_${Date.now()}.${extension}`;
    downloadLink.style.display = 'none';
    document.body.appendChild(downloadLink);
    downloadLink.click();
    document.body.removeChild(downloadLink);
    URL.revokeObjectURL(url);
    
    const fileName = `telegram_video_${Date.now()}.${extension}`;
    
    if (isMobile) {
      if (isIOS) {
        alert(`–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP4 –∫–∞–∫ "${fileName}"\n\n1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram\n2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è (üìé)\n4. –í—ã–±–µ—Ä–∏—Ç–µ "–§–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ"\n5. –ù–∞–π–¥–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –≤ –≥–∞–ª–µ—Ä–µ–µ\n6. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ`);
        
        setTimeout(() => {
          window.location.href = 'tg://';
        }, 1000);
        
        setTimeout(() => {
          const openApp = confirm('–û—Ç–∫—Ä—ã—Ç—å Telegram?');
          if (openApp) {
            window.open('https://apps.apple.com/app/telegram-messenger/id686449807', '_blank');
          }
        }, 3000);
        
      } else if (isAndroid) {
        alert(`–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP4 –≤ –ø–∞–ø–∫—É "–ó–∞–≥—Ä—É–∑–∫–∏" –∫–∞–∫ "${fileName}"\n\n1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram\n2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è (üìé)\n4. –í—ã–±–µ—Ä–∏—Ç–µ "–§–∞–π–ª" –∏–ª–∏ "–ì–∞–ª–µ—Ä–µ—è"\n5. –ù–∞–π–¥–∏—Ç–µ –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫–µ "–ó–∞–≥—Ä—É–∑–∫–∏"\n6. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ`);
        
        setTimeout(() => {
          try {
            const intent = 'intent://send#Intent;package=org.telegram.messenger;end';
            window.location.href = intent;
          } catch (e) {
            window.open('https://play.google.com/store/apps/details?id=org.telegram.messenger', '_blank');
          }
        }, 1000);
      }
    } else {
      alert(`–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP4 –∫–∞–∫ "${fileName}"\n\n1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram Web –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n3. –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª –≤ –æ–∫–Ω–æ —á–∞—Ç–∞\n–∏–ª–∏\n3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª\n4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ`);
      
      setTimeout(() => {
        window.open('https://web.telegram.org/', '_blank');
      }, 1000);
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤–∏–¥–µ–æ:', error);
    alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
};